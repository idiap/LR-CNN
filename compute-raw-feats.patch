diff --git a/src/feat/Makefile b/src/feat/Makefile
index 2af9da2ec..ee390cc91 100644
--- a/src/feat/Makefile
+++ b/src/feat/Makefile
@@ -9,7 +9,7 @@ TESTFILES = feature-mfcc-test feature-plp-test feature-fbank-test \
          resample-test online-feature-test signal-test wave-reader-test
 
 OBJFILES = feature-functions.o feature-mfcc.o feature-plp.o feature-fbank.o \
-           feature-spectrogram.o mel-computations.o wave-reader.o \
+           feature-spectrogram.o feature-raw.o mel-computations.o wave-reader.o \
            pitch-functions.o resample.o online-feature.o signal.o \
            feature-window.o
 
diff --git a/src/feat/feature-raw.cc b/src/feat/feature-raw.cc
new file mode 100644
index 000000000..35188d5be
--- /dev/null
+++ b/src/feat/feature-raw.cc
@@ -0,0 +1,60 @@
+// feat/feature-raw.cc
+
+// Copyright 2009-2012  Karel Vesely
+// Copyright 2012  Navdeep Jaitly
+// Modified: Pavan
+
+// See ../../COPYING for clarification regarding multiple authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//  http://www.apache.org/licenses/LICENSE-2.0
+//
+// THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+// KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
+// WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
+// MERCHANTABLITY OR NON-INFRINGEMENT.
+// See the Apache 2 License for the specific language governing permissions and
+// limitations under the License.
+
+
+#include "feat/feature-raw.h"
+
+
+namespace kaldi {
+
+RawComputer::RawComputer(const RawOptions &opts)
+    : opts_(opts), srfft_(NULL) {
+  if (opts.energy_floor > 0.0)
+    log_energy_floor_ = Log(opts.energy_floor);
+
+  int32 padded_window_size = opts.frame_opts.PaddedWindowSize();
+}
+
+RawComputer::RawComputer(const RawComputer &other):
+    opts_(other.opts_), log_energy_floor_(other.log_energy_floor_), srfft_(NULL) {
+}
+
+RawComputer::~RawComputer() {
+}
+
+void RawComputer::Compute(BaseFloat signal_log_energy,
+                                  BaseFloat vtln_warp,
+                                  VectorBase<BaseFloat> *signal_frame,
+                                  VectorBase<BaseFloat> *feature) {
+  KALDI_ASSERT(signal_frame->Dim() == opts_.frame_opts.PaddedWindowSize() &&
+               feature->Dim() == this->Dim());
+
+
+  // Compute energy after window function (not the raw one)
+  if (!opts_.raw_energy)
+    signal_log_energy = Log(std::max(VecVec(*signal_frame, *signal_frame),
+                                     std::numeric_limits<BaseFloat>::epsilon()));
+
+  // Copy the signal as the feature
+  feature->CopyFromVec(*signal_frame);
+}
+
+}  // namespace kaldi
diff --git a/src/feat/feature-raw.h b/src/feat/feature-raw.h
new file mode 100644
index 000000000..5a5d5c28c
--- /dev/null
+++ b/src/feat/feature-raw.h
@@ -0,0 +1,114 @@
+// feat/feature-raw.h
+
+// Copyright 2009-2012  Karel Vesely
+// Copyright 2012  Navdeep Jaitly
+// Modified: Pavan
+
+// See ../../COPYING for clarification regarding multiple authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//  http://www.apache.org/licenses/LICENSE-2.0
+//
+// THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+// KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
+// WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
+// MERCHANTABLITY OR NON-INFRINGEMENT.
+// See the Apache 2 License for the specific language governing permissions and
+// limitations under the License.
+
+#ifndef KALDI_FEAT_FEATURE_RAW_H_
+#define KALDI_FEAT_FEATURE_RAW_H_
+
+
+#include <string>
+
+#include "feat/feature-common.h"
+#include "feat/feature-functions.h"
+#include "feat/feature-window.h"
+
+namespace kaldi {
+/// @addtogroup  feat FeatureExtraction
+/// @{
+
+
+/// RawOptions contains basic options for computing raw
+/// features.
+struct RawOptions {
+  FrameExtractionOptions frame_opts;
+  BaseFloat energy_floor;
+  bool raw_energy;  // If true, compute energy before preemphasis and windowing
+
+  RawOptions() :
+    energy_floor(0.0),  // not in log scale: a small value e.g. 1.0e-10
+    raw_energy(true) {}
+
+  void Register(OptionsItf *opts) {
+    frame_opts.Register(opts);
+    opts->Register("energy-floor", &energy_floor,
+                   "Floor on energy (absolute, not relative) in Raw computation");
+    opts->Register("raw-energy", &raw_energy,
+                   "If true, compute energy before preemphasis and windowing");
+  }
+};
+
+/// Class for computing raw features.
+class RawComputer {
+ public:
+  typedef RawOptions Options;
+  explicit RawComputer(const RawOptions &opts);
+  RawComputer(const RawComputer &other);
+
+  const FrameExtractionOptions& GetFrameOptions() const {
+    return opts_.frame_opts;
+  }
+
+  int32 Dim() const { return opts_.frame_opts.PaddedWindowSize(); }
+
+  bool NeedRawLogEnergy() { return opts_.raw_energy; }
+
+
+  /**
+     Function that computes one frame of raw features from
+     one frame of signal.
+
+     @param [in] signal_raw_log_energy The log-energy of the frame of the signal
+         prior to windowing and pre-emphasis, or
+         log(numeric_limits<float>::min()), whichever is greater.  Must be
+         ignored by this function if this class returns false from
+         this->NeedsRawLogEnergy().
+     @param [in] vtln_warp  This is ignored by this function, it's only
+         needed for interface compatibility.
+     @param [in] signal_frame  One frame of the signal,
+       as extracted using the function ExtractWindow() using the options
+       returned by this->GetFrameOptions().  The function will use the
+       vector as a workspace, which is why it's a non-const pointer.
+     @param [out] feature  Pointer to a vector of size this->Dim(), to which
+         the computed feature will be written.
+  */
+  void Compute(BaseFloat signal_log_energy,
+               BaseFloat vtln_warp,
+               VectorBase<BaseFloat> *signal_frame,
+               VectorBase<BaseFloat> *feature);
+
+  ~RawComputer();
+
+ private:
+  RawOptions opts_;
+  BaseFloat log_energy_floor_;
+  SplitRadixRealFft<BaseFloat> *srfft_;
+
+  // Disallow assignment.
+  RawComputer &operator=(const RawComputer &other);
+};
+
+typedef OfflineFeatureTpl<RawComputer> Raw;
+
+
+/// @} End of "addtogroup feat"
+}  // namespace kaldi
+
+
+#endif  // KALDI_FEAT_FEATURE_RAW_H_
diff --git a/src/featbin/Makefile b/src/featbin/Makefile
index 8e72d0f74..6514209b3 100644
--- a/src/featbin/Makefile
+++ b/src/featbin/Makefile
@@ -8,7 +8,7 @@ BINFILES = add-deltas add-deltas-sdc append-post-to-feats \
            compose-transforms compute-and-process-kaldi-pitch-feats \
            compute-cmvn-stats compute-cmvn-stats-two-channel \
            compute-fbank-feats compute-kaldi-pitch-feats compute-mfcc-feats \
-           compute-plp-feats compute-spectrogram-feats concat-feats copy-feats \
+           compute-plp-feats compute-spectrogram-feats compute-raw-feats concat-feats copy-feats \
            copy-feats-to-htk copy-feats-to-sphinx extend-transform-dim \
            extract-feature-segments extract-segments feat-to-dim \
            feat-to-len fmpe-acc-stats fmpe-apply-transform fmpe-est \
diff --git a/src/featbin/compute-raw-feats.cc b/src/featbin/compute-raw-feats.cc
new file mode 100644
index 000000000..212b6ca1a
--- /dev/null
+++ b/src/featbin/compute-raw-feats.cc
@@ -0,0 +1,165 @@
+// featbin/compute-raw-feats.cc
+
+// Copyright 2009-2011  Microsoft Corporation
+// Modified: Pavan
+
+// See ../../COPYING for clarification regarding multiple authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//  http://www.apache.org/licenses/LICENSE-2.0
+//
+// THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+// KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
+// WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
+// MERCHANTABLITY OR NON-INFRINGEMENT.
+// See the Apache 2 License for the specific language governing permissions and
+// limitations under the License.
+
+#include "base/kaldi-common.h"
+#include "util/common-utils.h"
+#include "feat/feature-raw.h"
+#include "feat/wave-reader.h"
+
+
+int main(int argc, char *argv[]) {
+  try {
+    using namespace kaldi;
+    const char *usage =
+        "Create raw feature files.\n"
+        "Usage:  compute-raw-feats [options...] <wav-rspecifier> <feats-wspecifier>\n";
+
+    // construct all the global objects
+    ParseOptions po(usage);
+    RawOptions raw_opts;
+    bool subtract_mean = false;
+    int32 channel = -1;
+    BaseFloat min_duration = 0.0;
+    // Define defaults for gobal options
+    std::string output_format = "kaldi";
+
+    // Register the option struct
+    raw_opts.Register(&po);
+    // Register the options
+    po.Register("output-format", &output_format, "Format of the output files [kaldi, htk]");
+    po.Register("subtract-mean", &subtract_mean, "Subtract mean of each feature file [CMS]; not recommended to do it this way. ");
+    po.Register("channel", &channel, "Channel to extract (-1 -> expect mono, 0 -> left, 1 -> right)");
+    po.Register("min-duration", &min_duration, "Minimum duration of segments to process (in seconds).");
+
+    // OPTION PARSING ..........................................................
+    //
+
+    // parse options (+filling the registered variables)
+    po.Read(argc, argv);
+
+    if (po.NumArgs() != 2) {
+      po.PrintUsage();
+      exit(1);
+    }
+
+    std::string wav_rspecifier = po.GetArg(1);
+
+    std::string output_wspecifier = po.GetArg(2);
+
+    Raw spec(raw_opts);
+
+    SequentialTableReader<WaveHolder> reader(wav_rspecifier);
+    BaseFloatMatrixWriter kaldi_writer;  // typedef to TableWriter<something>.
+    TableWriter<HtkMatrixHolder> htk_writer;
+
+    if (output_format == "kaldi") {
+      if (!kaldi_writer.Open(output_wspecifier))
+        KALDI_ERR << "Could not initialize output with wspecifier "
+                  << output_wspecifier;
+    } else if (output_format == "htk") {
+      if (!htk_writer.Open(output_wspecifier))
+        KALDI_ERR << "Could not initialize output with wspecifier "
+                  << output_wspecifier;
+    } else {
+      KALDI_ERR << "Invalid output_format string " << output_format;
+    }
+
+    int32 num_utts = 0, num_success = 0;
+    for (; !reader.Done(); reader.Next()) {
+      num_utts++;
+      std::string utt = reader.Key();
+      const WaveData &wave_data = reader.Value();
+      if (wave_data.Duration() < min_duration) {
+        KALDI_WARN << "File: " << utt << " is too short ("
+                   << wave_data.Duration() << " sec): producing no output.";
+        continue;
+      }
+      int32 num_chan = wave_data.Data().NumRows(), this_chan = channel;
+      {  // This block works out the channel (0=left, 1=right...)
+        KALDI_ASSERT(num_chan > 0);  // should have been caught in
+        // reading code if no channels.
+        if (channel == -1) {
+          this_chan = 0;
+          if (num_chan != 1)
+            KALDI_WARN << "Channel not specified but you have data with "
+                       << num_chan  << " channels; defaulting to zero";
+        } else {
+          if (this_chan >= num_chan) {
+            KALDI_WARN << "File with id " << utt << " has "
+                       << num_chan << " channels but you specified channel "
+                       << channel << ", producing no output.";
+            continue;
+          }
+        }
+      }
+
+      if (raw_opts.frame_opts.samp_freq != wave_data.SampFreq())
+        KALDI_ERR << "Sample frequency mismatch: you specified "
+                  << raw_opts.frame_opts.samp_freq << " but data has "
+                  << wave_data.SampFreq() << " (use --sample-frequency "
+                  << "option).  Utterance is " << utt;
+
+      SubVector<BaseFloat> waveform(wave_data.Data(), this_chan);
+      Matrix<BaseFloat> features;
+      try {
+        spec.ComputeFeatures(waveform, wave_data.SampFreq(), 1.0, &features);
+      } catch (...) {
+        KALDI_WARN << "Failed to compute features for utterance "
+                   << utt;
+        continue;
+      }
+      if (subtract_mean) {
+        Vector<BaseFloat> mean(features.NumCols());
+        mean.AddRowSumMat(1.0, features);
+        mean.Scale(1.0 / features.NumRows());
+        for (int32 i = 0; i < features.NumRows(); i++)
+          features.Row(i).AddVec(-1.0, mean);
+      }
+      if (output_format == "kaldi") {
+        kaldi_writer.Write(utt, features);
+      } else {
+        std::pair<Matrix<BaseFloat>, HtkHeader> p;
+        p.first.Resize(features.NumRows(), features.NumCols());
+        p.first.CopyFromMat(features);
+        int32 frame_shift = raw_opts.frame_opts.frame_shift_ms * 10000;
+        HtkHeader header = {
+          features.NumRows(),
+          frame_shift,
+          static_cast<int16>(sizeof(float)*features.NumCols()),
+          007 | 020000
+        };
+        p.second = header;
+        htk_writer.Write(utt, p);
+      }
+      if(num_utts % 10 == 0)
+        KALDI_LOG << "Processed " << num_utts << " utterances";
+      KALDI_VLOG(2) << "Processed features for key " << utt;
+      num_success++;
+    }
+    KALDI_LOG << " Done " << num_success << " out of " << num_utts
+              << " utterances.";
+    return (num_success != 0 ? 0 : 1);
+  } catch(const std::exception& e) {
+    std::cerr << e.what();
+    return -1;
+  }
+  return 0;
+}
+
